import React from 'react'
import { Page, Text, View } from '@react-pdf/renderer'
import { styles, BRAND_COLORS } from './PDFStyles'
import { KPIData } from '@/types/dashboard'

interface PDFScorecardProps {
  kpiData: KPIData[]
}

export const PDFScorecard: React.FC<PDFScorecardProps> = ({ kpiData }) => {
  const summary = {
    greenCount: kpiData.filter(kpi => kpi.status === 'green').length,
    redCount: kpiData.filter(kpi => kpi.status === 'red').length,
    percentage: Math.round((kpiData.filter(kpi => kpi.status === 'green').length / kpiData.length) * 100)
  }

  return (
    <Page size="A4" style={styles.page}>
      <Text style={styles.sectionTitle}>The Perfect 10 Scorecard</Text>
      
      {/* Compact Summary */}
      <View style={[styles.statCardLarge, { marginBottom: 20 }]}>
        <Text style={[styles.kpiValueLarge, { color: BRAND_COLORS.surface, textAlign: 'center', fontSize: 24 }]}>
          {summary.percentage}% Overall Performance Score
        </Text>
        <Text style={[styles.tableCell, { color: BRAND_COLORS.surface, textAlign: 'center', fontSize: 10 }]}>
          {summary.greenCount} of {kpiData.length} KPIs on target
        </Text>
      </View>
      
      {/* Simple 2-column grid of ALL KPI cards */}
      <View style={{
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between'
      }}>
        {kpiData.map((kpi) => (
          <View key={kpi.id} style={{
            width: '48%',
            backgroundColor: BRAND_COLORS.background,
            borderRadius: 4,
            padding: 8,
            marginBottom: 6,
            borderWidth: 1,
            borderColor: BRAND_COLORS.neutral,
            borderStyle: 'solid'
          }}>
            <View style={{
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 4
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold', color: BRAND_COLORS.text.primary }}>
                {kpi.name}
              </Text>
              <View style={{
                width: 8,
                height: 8,
                backgroundColor: kpi.status === 'green' ? BRAND_COLORS.accent : 
                               kpi.status === 'red' ? BRAND_COLORS.danger : 
                               BRAND_COLORS.warning,
                borderRadius: 4
              }} />
            </View>
            
            <Text style={{ fontSize: 14, fontWeight: 'bold', color: BRAND_COLORS.text.primary }}>
              {kpi.unit === '$' && '$'}
              {kpi.value.toLocaleString()}
              {kpi.unit === '%' && '%'}
            </Text>
            
            {kpi.change !== undefined && (
              <Text style={{
                fontSize: 8,
                color: kpi.changeType === 'increase' ? BRAND_COLORS.accent : BRAND_COLORS.danger
              }}>
                {kpi.changeType === 'increase' ? '↑' : '↓'} {Math.abs(kpi.change)}%
              </Text>
            )}
            
            {kpi.target && (
              <Text style={{ fontSize: 7, color: BRAND_COLORS.text.secondary }}>
                Target: {kpi.unit === '$' && '$'}{kpi.target.value.toLocaleString()}{kpi.unit === '%' && '%'}
              </Text>
            )}
          </View>
        ))}
      </View>
      
      <Text style={styles.footer}>
        Generated by ServicePoint Pro • Profit Pulse AI Dashboard • {new Date().toLocaleDateString()}
      </Text>
      <Text style={styles.pageNumber}>2</Text>
    </Page>
  )
}